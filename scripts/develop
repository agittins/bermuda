#!/usr/bin/env bash

set -e

# #### Oh, hey...
# If you're using vscode, rather than using this I'd
# suggest running the debugger directly. As of now there's
# a working(!) debugpy entry in launch.json (just hit F5)


cd "$(dirname "$0")/.."

if [[ ! -f "$VENV/bin/activate" ]]; then
    echo "ERROR: No venv, make sure you run setup first!"
    exit 1
fi

source $VENV/bin/activate


# Create config dir if not present
if [[ ! -d "${PWD}/config" ]]; then
    mkdir -p "${PWD}/config"
    hass --config "${PWD}/config" --script ensure_config
fi

# Set the path to custom_components
## This let's us have the structure we want <root>/custom_components/integration_blueprint
## while at the same time have Home Assistant configuration inside <root>/config
## without resulting to symlinks.
#
# Meh.. this used to work with the python extensions built-in debugger,
# but that's deprecated and the below didn't seem to work with the
# debugpy extension. Instead don't use this script and just hit F5.
export PYTHONPATH="${PYTHONPATH}:${PWD}/custom_components"

# Start Home Assistant
hass --config "${PWD}/config" --debug
